"""
Django settings for django_vue_element_admin project.

Generated by 'django-admin startproject' using Django 2.2.27.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys
from datetime import timedelta

import psutil

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2vqdr41ss2q9)g%@_-8+%np*6f3@xht5vaw7j-9t8nkpwgbz5p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # 注册app
    'simpleui',  # 完善django后台的登录
    'rest_framework',
    'drf_yasg',  # swagger文档
    'corsheaders',  # 跨域
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 注册自己的app
    'django_vue_element_admin.myapps.oauth',
    'django_vue_element_admin.myapps.monitor',
    'django_vue_element_admin.myapps.system',
    'django_vue_element_admin.myapps.boke',
]

MIDDLEWARE = [
    # 跨域
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 使用自定义中间件,来自定义响应
    'django_vue_element_admin.myapps.utils.middleware.ResponseMiddleware',
]

ROOT_URLCONF = 'django_vue_element_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'django_vue_element_admin/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_vue_element_admin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    # 配置mysql数据库
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'grad_pro',  # 数据库库名（需提前创建好数据库）
        'USER': 'root',  # 用户名
        'PASSWORD': 'hu15879093053',  # 连接密码
        'HOST': '127.0.0.1',  # 主机
        'PORT': '3306',  # mysql端口
    }
}

# 指定自定义的用户模型
AUTH_USER_MODEL = 'oauth.Users'

# DRF配置
REST_FRAMEWORK = {
    # 权限认证方式,采用jwt进行认证
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # DRF-JWT认证
    ],
    # 采用全局分页
    'DEFAULT_PAGINATION_CLASS': 'django_vue_element_admin.myapps.utils.pagination.GlobalPagination',
    # 用户的权限认证,需登录与满足身份
    'DEFAULT_PERMISSION_CLASSES':
        (
            'rest_framework.permissions.IsAuthenticated',  # 登录验证
            'django_vue_element_admin.myapps.utils.permissions.RbacPermission',  # 自定义权限认证
        ),
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': timedelta(days=1),  # Token有效时间
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),  # Token刷新有效时间
    'JWT_ALLOW_REFRESH': True,  # 允许刷新Token
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',  # 定义Token携带头信息, Authorization: Bearer ...
}

AUTHENTICATION_BACKENDS = [
    'django_vue_element_admin.myapps.oauth.utils.UsernameMobileAuthBackend',  # 自定义用户认证方法
]

# 去掉默认Logo或换成自己Logo链接
SIMPLEUI_LOGO = 'http://huyinfu.shop/code-wallpaper-8.jpg'
# simpleui配置项
SIMPLEUI_HOME_INFO = False  # 设置admin站点不显示simpleui的git页

# 跨域设置
# CORS跨域设置(3.0版本后需增加http)
# 允许携带cookie
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
    'x-token',
    'X-Token',
)

# redis配置
# Redis
REDIS_PWD = os.getenv('REDIS_PWD', 'hu15879093053')
REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
if REDIS_PWD:
    REDIS_STR = f':{REDIS_PWD}@'
else:
    REDIS_STR = ''

# django采用的Redis的缓存
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/6',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    # session
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/7',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    # 用户信息/ip黑名单
    'user_info': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/8',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    # 在线用户监测
    'online_user': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/9',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}
# 设置Django session使用redis作为后端存储
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'session'

BASE_API = 'api/'  # 项目BASE API, 如设置时必须以/结尾
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'django_vue_element_admin/media/')
DEFAULT_PWD = os.getenv('DEFAULT_PWD', '123456')  # 创建用户默认密码
# 权限认证白名单,就是不需要权限认证的路由
WHITE_LIST = [f'/{BASE_API}oauth/login/', f'/{BASE_API}oauth/info/', f'/{BASE_API}swagger/.*']
REGEX_URL = '^{url}$'  # 权限匹配时,严格正则url
PROJECT_START_TIME = psutil.Process().create_time()  # 项目开始的时间戳

# 去掉默认Logo或换成自己Logo链接
SIMPLEUI_LOGO = 'http://huyinfu.shop/code-wallpaper-8.jpg'
# simpleui配置项
SIMPLEUI_HOME_INFO = False  # 设置admin站点不显示simpleui的git页
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# swagger认证配置
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 语言格式

TIME_ZONE = 'Asia/Shanghai'  # 设置时区

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 保证数据库时间与现在时间同步

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 配置静态文件的路径
STATIC_URL = '/static/'
# 元组或者列表
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'django_vue_element_admin/static'),
)

# 自动添加主键
DEFAULT_AUTO_FIELD = 'django.db.test_model.AutoField'
